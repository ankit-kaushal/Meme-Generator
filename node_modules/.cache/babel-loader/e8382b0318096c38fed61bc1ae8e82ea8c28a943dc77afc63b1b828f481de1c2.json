{"ast":null,"code":"var _jsxFileName = \"/Users/ankitkaushal/Documents/Untitled/src/Myapp/controller.jsx\",\n  _s = $RefreshSig$();\nimport Home from './home';\nimport Meme from './memePage';\nimport { useEffect, useState } from \"react\";\nimport Footer from '../comp/Footer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Switch,\n  Route,\n  Redirect\n} = require(\"react-router-dom\");\nconst Controller = () => {\n  _s();\n  const [templates, setTemplates] = useState([]);\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(x => x.json().then(response => setTemplates(response.data.memes)));\n  }, []);\n  const MemeWithId = ({\n    match\n  }) => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Meme, {\n        template: templates.find(item => item.id === match.params.memeId)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/home\",\n        component: () => /*#__PURE__*/_jsxDEV(Home, {\n          file: templates\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 58\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/menu/:memeId\",\n        component: MemeWithId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n_s(Controller, \"fK5XUS313ViGKACFrAb2J23MOoE=\");\n_c = Controller;\nexport default Controller;\nvar _c;\n$RefreshReg$(_c, \"Controller\");","map":{"version":3,"names":["Home","Meme","useEffect","useState","Footer","jsxDEV","_jsxDEV","Fragment","_Fragment","Switch","Route","Redirect","require","Controller","_s","templates","setTemplates","fetch","then","x","json","response","data","memes","MemeWithId","match","children","template","find","item","id","params","memeId","fileName","_jsxFileName","lineNumber","columnNumber","exact","path","component","file","to","_c","$RefreshReg$"],"sources":["/Users/ankitkaushal/Documents/Untitled/src/Myapp/controller.jsx"],"sourcesContent":["import Home from './home';\nimport Meme from './memePage';\nimport { useEffect, useState } from \"react\";\nimport Footer from '../comp/Footer';\nconst { Switch,Route,Redirect } = require(\"react-router-dom\");\n\n\nconst Controller=()=>{\n   \n    const[templates,setTemplates]=useState([]);\n    \n\n    useEffect(()=>{\n       \n        fetch(\"https://api.imgflip.com/get_memes\").then(x=>x.json().then(response=>setTemplates(response.data.memes)))\n    },[])\n\n    const MemeWithId=({match})=>{\n                 \n        return(\n            <>\n            <Meme template={templates.find((item)=>item.id===match.params.memeId)} />\n            </>\n        )\n        \n    }\n        \n\n    return(\n            <>\n                \n                <Switch>\n                <Route exact path=\"/home\" component={()=><Home file={templates}/>}/>\n                 <Route path=\"/menu/:memeId\" component={MemeWithId}/>\n                 <Redirect to=\"/home\" />\n                </Switch> \n                <Footer />             \n            </>\n    )\n}\nexport default Controller;"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,QAAQ;AACzB,OAAOC,IAAI,MAAM,YAAY;AAC7B,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACpC,MAAM;EAAEC,MAAM;EAACC,KAAK;EAACC;AAAS,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAG7D,MAAMC,UAAU,GAACA,CAAA,KAAI;EAAAC,EAAA;EAEjB,MAAK,CAACC,SAAS,EAACC,YAAY,CAAC,GAACb,QAAQ,CAAC,EAAE,CAAC;EAG1CD,SAAS,CAAC,MAAI;IAEVe,KAAK,CAAC,mCAAmC,CAAC,CAACC,IAAI,CAACC,CAAC,IAAEA,CAAC,CAACC,IAAI,CAAC,CAAC,CAACF,IAAI,CAACG,QAAQ,IAAEL,YAAY,CAACK,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC;EAClH,CAAC,EAAC,EAAE,CAAC;EAEL,MAAMC,UAAU,GAACA,CAAC;IAACC;EAAK,CAAC,KAAG;IAExB,oBACInB,OAAA,CAAAE,SAAA;MAAAkB,QAAA,eACApB,OAAA,CAACL,IAAI;QAAC0B,QAAQ,EAAEZ,SAAS,CAACa,IAAI,CAAEC,IAAI,IAAGA,IAAI,CAACC,EAAE,KAAGL,KAAK,CAACM,MAAM,CAACC,MAAM;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC,gBACvE,CAAC;EAGX,CAAC;EAGD,oBACQ9B,OAAA,CAAAE,SAAA;IAAAkB,QAAA,gBAEIpB,OAAA,CAACG,MAAM;MAAAiB,QAAA,gBACPpB,OAAA,CAACI,KAAK;QAAC2B,KAAK;QAACC,IAAI,EAAC,OAAO;QAACC,SAAS,EAAEA,CAAA,kBAAIjC,OAAA,CAACN,IAAI;UAACwC,IAAI,EAAEzB;QAAU;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eACnE9B,OAAA,CAACI,KAAK;QAAC4B,IAAI,EAAC,eAAe;QAACC,SAAS,EAAEf;MAAW;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eACpD9B,OAAA,CAACK,QAAQ;QAAC8B,EAAE,EAAC;MAAO;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB,CAAC,eACT9B,OAAA,CAACF,MAAM;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACZ,CAAC;AAEf,CAAC;AAAAtB,EAAA,CAhCKD,UAAU;AAAA6B,EAAA,GAAV7B,UAAU;AAiChB,eAAeA,UAAU;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}